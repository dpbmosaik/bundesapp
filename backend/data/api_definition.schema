openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DPB-Mosaik/Bundesapp/1.0.0
info:
  description: This is the Bundesapp API
  version: "1.0.0"
  title: Bundesapp API
  contact:
    email: obi@dpbm.de
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Operations available to regular users Item'
paths:
  /profile:
    get:
      summary: Gets full user profile by ID if allowed
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Gets full user profile by ID if allowed
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/pending:
      get:
        summary: Gets users for verification for current user
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserList'
          '401':
            description: Permission denied
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  /groups:
    get:
      summary: Get group hierachy that user has access to.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupTreeNode'
        '401':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new group and attach to tree.
      requestBody:
        description: Group with parent node
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
        required: true
      responses:
        '201':
          description: Null response
        '401':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 04e46ba5-5839-4382-b511-e200d2b34c6b
        name:
          type: string
          example: "Silberf√ºchse"
        type:
          type: string
          enum: [Bund, Ring, Horst, Stamm, Gruppe, Aktion, AK, Sonstige]
          example: "Stamm"
        permissions:
          type: string
          enum: [read, write]
          example: "read"

    GroupCreate:
      type: object
      properties:
        parent_id:
          type: string
          format: uuid
          example: 04e46ba5-5839-4382-b511-e200d2b34c6b
        group:
          $ref: '#/components/schemas/Group'

    GroupTreeNode:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
        sub_groups:
          type: array
          items:
              $ref: '#/components/schemas/GroupTreeNode'

    Role:
      type: object
      properties:
        name:
          type: string
          example: "role_stammesfuehrerin"

    UserId:
      type: string

    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'

    RegisterInfo:
      type: object
      properties:
        stamm:
          type: string
        group:
          type: string
        email:
          type: string

    PublicProfile:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/UserId'
        firstname:
          type: string
        lastname:
          type: string
        scout_name:
          type: string

    Address:
      type: object
      properties:
        address:
          type: string
        zipcode:
          type: number
        city:
          type: string
        phone:
          type: string
        additional_address:
          type: string

    EmergencyContact:
      type: object
      properties:
        name:
          type: string
        relationship:
          type: string
          enum: [Eltern, Geschwister, Sonstige]
        email:
          type: string
          format: email
        phone:
          type: string

    User:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/UserId'
        username:
          type: string

    UserProfile:
      type: object
      properties:
        user_data:
          $ref: '#/components/schemas/UserId'
        profile:
          $ref: '#/components/schemas/PublicProfile'
        address:
          $ref: '#/components/schemas/Address'
        emergency_contact:
          $ref: '#/components/schemas/EmergencyContact'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string