# generated by datamodel-codegen:
#   filename:  api_definition.schema
#   timestamp: 2021-12-05T18:52:26+00:00

from __future__ import annotations

from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field
from typing_extensions import Literal


class Group(BaseModel):
    id: Optional[UUID] = Field(None, example='04e46ba5-5839-4382-b511-e200d2b34c6b')
    name: Optional[str] = Field(None, example='Silberf√ºchse')
    type: Optional[
        Literal['Bund', 'Ring', 'Horst', 'Stamm', 'Gruppe', 'Aktion', 'AK', 'Sonstige']
    ] = Field(None, example='Stamm')
    permissions: Optional[Literal['read', 'write']] = Field(None, example='read')


class GroupCreate(BaseModel):
    parent_id: Optional[UUID] = Field(
        None, example='04e46ba5-5839-4382-b511-e200d2b34c6b'
    )
    group: Optional[Group] = None


class GroupTreeNode(BaseModel):
    group: Optional[Group] = None
    sub_groups: Optional[List[GroupTreeNode]] = None


class Role(BaseModel):
    name: Optional[str] = Field(None, example='role_stammesfuehrerin')


class UserId(BaseModel):
    __root__: str


class RegisterInfo(BaseModel):
    stamm: Optional[str] = None
    group: Optional[str] = None
    email: Optional[str] = None


class PublicProfile(BaseModel):
    user_id: Optional[UserId] = None
    firstname: Optional[str] = None
    lastname: Optional[str] = None
    scout_name: Optional[str] = None


class Address(BaseModel):
    address: Optional[str] = None
    zipcode: Optional[float] = None
    city: Optional[str] = None
    phone: Optional[str] = None
    additional_address: Optional[str] = None


class EmergencyContact(BaseModel):
    name: Optional[str] = None
    relationship: Optional[Literal['Eltern', 'Geschwister', 'Sonstige']] = None
    email: Optional[EmailStr] = None
    phone: Optional[str] = None


class User(BaseModel):
    user_id: Optional[UserId] = None
    username: Optional[str] = None


class UserProfile(BaseModel):
    user_data: Optional[UserId] = None
    profile: Optional[PublicProfile] = None
    address: Optional[Address] = None
    emergency_contact: Optional[EmergencyContact] = None


class Error(BaseModel):
    code: int
    message: str


class UserList(BaseModel):
    __root__: List[User]


GroupTreeNode.update_forward_refs()
